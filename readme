Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

    Connor Brown

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

    The course's lectures.

    The course's website.

    Documents that are referenced directly by the course's website. Such 
    documents include the course's lecture slides and precept handouts.

    The course's textbooks.

    The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

    None

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

    I thought this assignment was actually pretty fun since it mimicked
    some of COS226 but with a more lower level management of memory. In
    that sense it was also pretty helpful for putting DMM into context.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

    N/A

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

    Warning: "symtablelist.c: (in function SymTable_map)
        symtablelist.c:338:5: Statement has no effect: 
        pfApply(psCurren... Statement has no visible effect --- 
        no values are modified. (Use -noeffect to inhibit 
        warning)"

    I disagree with this warning because we do not know the return type
    of pfApply, so we can't necessarily change values based on its 
    return type. Also, in the case where pfApply prints all the 
    key/value pairs, it actually doesn't have a return value at all 
    (void). 
------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

        Warnings: symtablelist.c: line 102: medium priority:
                  Do you want to validate 'pvValue' through an assert?

                  symtablelist.c: line 156: medium priority:
                  Do you want to validate 'pvValue' through an assert?

                  symtablelist.c: line 321: medium priority:
                  Do you want to validate 'pvExtra' through an assert?

    I disagree with these warnings because the client should be allowed
    to insert key/value pairs where the value is NULL; and they should 
    be allowed to map functions where pvExtra is NULL, per implied API
    specifications in testsymtable.c.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

    Warning: symtablehash.c:544:7: Statement has no effect: 
             pfApply(psCurren... Statement has no visible effect --- 
             no values are modified. (Use -noeffect to inhibit warning)

    I disagree with this warning because we do not know the return type
    of pfApply, so we can't necessarily change values based on its 
    return type. Also, in the case where pfApply prints all the 
    key/value pairs, it actually doesn't have a return value at all 
    (void). 

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

        Warnings: symtablehash.c: line 255: medium priority:
                  Do you want to validate 'pvValue' through an assert?
     
                  symtablehash.c: line 327: medium priority:
                  Do you want to validate 'pvValue' through an assert?
     
                  symtablehash.c: line 520: medium priority:
                  Do you want to validate 'pvExtra' through an assert?

                  symtablehash.c: line 548: low priority: 
                  A source code file should contain fewer than 500 
                  lines; this file contains 549 lines

    I disagree with these warnings because the client should be allowed
    to insert key/value pairs where the value is NULL; and they should 
    be allowed to map functions where pvExtra is NULL, per implied API
    specifications in testsymtable.c. Concerning the length of the file,
    most of these extra lines can be attributed to my helper functions
    and global variables. Though these may add more lines to the lengthy
    program, it is best style to have these helper functions be included
    in the program file since they are ONLY used in this scope. As well
    it adds more clarity to what everything is doing.
------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.005420 seconds.
-- 5000 bindings consumed 1.136165 seconds.
-- 50000 bindings consumed 150.642521 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.015863 seconds.
-- 50000 bindings consumed 0.431898 seconds.
-- 500000 bindings consumed 80.028214 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.002006 seconds.
-- 5000 bindings consumed 0.014079 seconds.
-- 50000 bindings consumed 0.137491 seconds.
-- 500000 bindings consumed 1.792421 seconds.
